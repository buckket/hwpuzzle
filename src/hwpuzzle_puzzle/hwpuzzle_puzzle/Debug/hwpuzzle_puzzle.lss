
hwpuzzle_puzzle.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00803800  000004c0  00000574  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000045c  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000064  0000845c  0000045c  00000510  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .bss          00000002  00803802  00803802  00000576  2**0
                  ALLOC
  4 .comment      00000030  00000000  00000000  00000576  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000005a8  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 000000f0  00000000  00000000  000005e8  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002e76  00000000  00000000  000006d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00002044  00000000  00000000  0000354e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000acd  00000000  00000000  00005592  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000174  00000000  00000000  00006060  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00001412  00000000  00000000  000061d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000005e6  00000000  00000000  000075e6  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000090  00000000  00000000  00007bcc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 45 00 	jmp	0x8a	; 0x8a <__ctors_end>
   4:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
   8:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
   c:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
  10:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
  14:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
  18:	0c 94 1f 02 	jmp	0x43e	; 0x43e <__vector_6>
  1c:	0c 94 8a 01 	jmp	0x314	; 0x314 <__vector_7>
  20:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
  24:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
  28:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
  2c:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
  30:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
  34:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
  38:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
  3c:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
  40:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
  44:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
  48:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
  4c:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
  50:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
  54:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
  58:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
  5c:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
  60:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
  64:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
  68:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
  6c:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
  70:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
  74:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
  78:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
  7c:	ec 01       	movw	r28, r24
  7e:	fa 01       	movw	r30, r20
  80:	ee 01       	movw	r28, r28
  82:	f0 01       	movw	r30, r0
  84:	f2 01       	movw	r30, r4
  86:	f4 01       	movw	r30, r8
  88:	f6 01       	movw	r30, r12

0000008a <__ctors_end>:
  8a:	11 24       	eor	r1, r1
  8c:	1f be       	out	0x3f, r1	; 63
  8e:	cf ef       	ldi	r28, 0xFF	; 255
  90:	cd bf       	out	0x3d, r28	; 61
  92:	df e3       	ldi	r29, 0x3F	; 63
  94:	de bf       	out	0x3e, r29	; 62

00000096 <__do_copy_data>:
  96:	18 e3       	ldi	r17, 0x38	; 56
  98:	a0 e0       	ldi	r26, 0x00	; 0
  9a:	b8 e3       	ldi	r27, 0x38	; 56
  9c:	e0 ec       	ldi	r30, 0xC0	; 192
  9e:	f4 e0       	ldi	r31, 0x04	; 4
  a0:	02 c0       	rjmp	.+4      	; 0xa6 <__do_copy_data+0x10>
  a2:	05 90       	lpm	r0, Z+
  a4:	0d 92       	st	X+, r0
  a6:	a2 30       	cpi	r26, 0x02	; 2
  a8:	b1 07       	cpc	r27, r17
  aa:	d9 f7       	brne	.-10     	; 0xa2 <__do_copy_data+0xc>

000000ac <__do_clear_bss>:
  ac:	28 e3       	ldi	r18, 0x38	; 56
  ae:	a2 e0       	ldi	r26, 0x02	; 2
  b0:	b8 e3       	ldi	r27, 0x38	; 56
  b2:	01 c0       	rjmp	.+2      	; 0xb6 <.do_clear_bss_start>

000000b4 <.do_clear_bss_loop>:
  b4:	1d 92       	st	X+, r1

000000b6 <.do_clear_bss_start>:
  b6:	a4 30       	cpi	r26, 0x04	; 4
  b8:	b2 07       	cpc	r27, r18
  ba:	e1 f7       	brne	.-8      	; 0xb4 <.do_clear_bss_loop>
  bc:	0e 94 85 00 	call	0x10a	; 0x10a <main>
  c0:	0c 94 2c 02 	jmp	0x458	; 0x458 <_exit>

000000c4 <__bad_interrupt>:
  c4:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000c8 <base_4>:
#define BUFFER_SIZE 100


void base_4(char input, uint8_t* output)
{
    for(uint8_t i = 0; i < 4; i++) {
  c8:	90 e0       	ldi	r25, 0x00	; 0
  ca:	09 c0       	rjmp	.+18     	; 0xde <base_4+0x16>
        output[i] = input % 4;
  cc:	fb 01       	movw	r30, r22
  ce:	e9 0f       	add	r30, r25
  d0:	f1 1d       	adc	r31, r1
  d2:	28 2f       	mov	r18, r24
  d4:	23 70       	andi	r18, 0x03	; 3
  d6:	20 83       	st	Z, r18
        input /= 4;
  d8:	86 95       	lsr	r24
  da:	86 95       	lsr	r24
#define BUFFER_SIZE 100


void base_4(char input, uint8_t* output)
{
    for(uint8_t i = 0; i < 4; i++) {
  dc:	9f 5f       	subi	r25, 0xFF	; 255
  de:	94 30       	cpi	r25, 0x04	; 4
  e0:	a8 f3       	brcs	.-22     	; 0xcc <base_4+0x4>
        output[i] = input % 4;
        input /= 4;
    }
}
  e2:	08 95       	ret

000000e4 <toggle_led>:

void toggle_led(uint8_t *toggle)
{
  e4:	cf 93       	push	r28
  e6:	df 93       	push	r29
  e8:	ec 01       	movw	r28, r24
    if (*toggle > 0) {
  ea:	88 81       	ld	r24, Y
  ec:	88 23       	and	r24, r24
  ee:	29 f0       	breq	.+10     	; 0xfa <toggle_led+0x16>
        LED_set(5);
  f0:	85 e0       	ldi	r24, 0x05	; 5
  f2:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <LED_set>
        *toggle = 0;
  f6:	18 82       	st	Y, r1
  f8:	05 c0       	rjmp	.+10     	; 0x104 <__EEPROM_REGION_LENGTH__+0x4>
    } else {
        LED_set(6);
  fa:	86 e0       	ldi	r24, 0x06	; 6
  fc:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <LED_set>
        *toggle = 1;
 100:	81 e0       	ldi	r24, 0x01	; 1
 102:	88 83       	st	Y, r24
    }
}
 104:	df 91       	pop	r29
 106:	cf 91       	pop	r28
 108:	08 95       	ret

0000010a <main>:

int main(void)
{
 10a:	cf 93       	push	r28
 10c:	df 93       	push	r29
 10e:	cd b7       	in	r28, 0x3d	; 61
 110:	de b7       	in	r29, 0x3e	; 62
 112:	c9 56       	subi	r28, 0x69	; 105
 114:	d1 09       	sbc	r29, r1
 116:	cd bf       	out	0x3d, r28	; 61
 118:	de bf       	out	0x3e, r29	; 62
    // Disable watchdog during setup phase
    wdt_disable();
 11a:	18 ed       	ldi	r17, 0xD8	; 216
 11c:	a8 95       	wdr
 11e:	14 bf       	out	0x34, r17	; 52
 120:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__RODATA_PM_OFFSET__+0x7f8100>
 124:	80 7f       	andi	r24, 0xF0	; 240
 126:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__RODATA_PM_OFFSET__+0x7f8100>

    // Disable prescaler
    ccp_write_io((void *)&(CLKCTRL.MCLKCTRLB), 0);
 12a:	60 e0       	ldi	r22, 0x00	; 0
 12c:	81 e6       	ldi	r24, 0x61	; 97
 12e:	90 e0       	ldi	r25, 0x00	; 0
 130:	0e 94 26 02 	call	0x44c	; 0x44c <ccp_write_io>

    // Enable RTC and PIT interrupt
    RTC_init();
 134:	0e 94 fe 01 	call	0x3fc	; 0x3fc <RTC_init>
    RTC_PIT_enable();
 138:	0e 94 12 02 	call	0x424	; 0x424 <RTC_PIT_enable>

    // Enable inputs and debounce logic
    input_init();
 13c:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <input_init>

    // Enable outputs and turn all LEDs off
    LED_set(-1);
 140:	8f ef       	ldi	r24, 0xFF	; 255
 142:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <LED_set>
    LED_init();
 146:	0e 94 df 01 	call	0x3be	; 0x3be <LED_init>

    // Enable again
    wdt_enable(WDTO_15MS);
 14a:	a8 95       	wdr
 14c:	14 bf       	out	0x34, r17	; 52
 14e:	10 91 00 01 	lds	r17, 0x0100	; 0x800100 <__RODATA_PM_OFFSET__+0x7f8100>
 152:	10 60       	ori	r17, 0x00	; 0
 154:	10 93 00 01 	sts	0x0100, r17	; 0x800100 <__RODATA_PM_OFFSET__+0x7f8100>
 158:	10 91 01 01 	lds	r17, 0x0101	; 0x800101 <__RODATA_PM_OFFSET__+0x7f8101>
 15c:	11 fd       	sbrc	r17, 1
 15e:	fc cf       	rjmp	.-8      	; 0x158 <main+0x4e>

    // Default state after reset
    uint8_t state = STATE_PLAY_DONE;

    char signal_buffer[BUFFER_SIZE] = "Nudel";
 160:	86 e0       	ldi	r24, 0x06	; 6
 162:	ec e5       	ldi	r30, 0x5C	; 92
 164:	f4 e8       	ldi	r31, 0x84	; 132
 166:	de 01       	movw	r26, r28
 168:	11 96       	adiw	r26, 0x01	; 1
 16a:	01 90       	ld	r0, Z+
 16c:	0d 92       	st	X+, r0
 16e:	8a 95       	dec	r24
 170:	e1 f7       	brne	.-8      	; 0x16a <main+0x60>
 172:	fe 01       	movw	r30, r28
 174:	37 96       	adiw	r30, 0x07	; 7
 176:	8e e5       	ldi	r24, 0x5E	; 94
 178:	df 01       	movw	r26, r30
 17a:	1d 92       	st	X+, r1
 17c:	8a 95       	dec	r24
 17e:	e9 f7       	brne	.-6      	; 0x17a <main+0x70>
    uint8_t quaternary_position = -1;

    uint8_t play_position = 0;
    uint8_t replay_position = 0;

    uint8_t toggle = 0;
 180:	aa 96       	adiw	r28, 0x2a	; 42
 182:	1f ae       	std	Y+63, r1	; 0x3f
 184:	aa 97       	sbiw	r28, 0x2a	; 42

    // Reset all detected key events
    input_get_key_press(0xFF);
 186:	8f ef       	ldi	r24, 0xFF	; 255
 188:	0e 94 c7 01 	call	0x38e	; 0x38e <input_get_key_press>

    uint8_t quaternary[4];
    uint8_t quaternary_position = -1;

    uint8_t play_position = 0;
    uint8_t replay_position = 0;
 18c:	e1 2c       	mov	r14, r1
    uint8_t signal_position = 0;

    uint8_t quaternary[4];
    uint8_t quaternary_position = -1;

    uint8_t play_position = 0;
 18e:	f1 2c       	mov	r15, r1

    char signal_buffer[BUFFER_SIZE] = "Nudel";
    uint8_t signal_position = 0;

    uint8_t quaternary[4];
    uint8_t quaternary_position = -1;
 190:	0f ef       	ldi	r16, 0xFF	; 255

    // Default state after reset
    uint8_t state = STATE_PLAY_DONE;

    char signal_buffer[BUFFER_SIZE] = "Nudel";
    uint8_t signal_position = 0;
 192:	c1 2c       	mov	r12, r1

    // Enable again
    wdt_enable(WDTO_15MS);

    // Default state after reset
    uint8_t state = STATE_PLAY_DONE;
 194:	11 e0       	ldi	r17, 0x01	; 1

    // Reset all detected key events
    input_get_key_press(0xFF);

    while (1) {
        wdt_reset();
 196:	a8 95       	wdr

        if(input_get_key_press(RESET_PIN)) {
 198:	84 e0       	ldi	r24, 0x04	; 4
 19a:	0e 94 c7 01 	call	0x38e	; 0x38e <input_get_key_press>
 19e:	88 23       	and	r24, r24
 1a0:	41 f0       	breq	.+16     	; 0x1b2 <main+0xa8>
            state = STATE_PLAY;
            signal_position = 0;
            quaternary_position = -1;
            play_position = 0;
            replay_position = 0;
            LED_set(-1);
 1a2:	8f ef       	ldi	r24, 0xFF	; 255
 1a4:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <LED_set>
        if(input_get_key_press(RESET_PIN)) {
            state = STATE_PLAY;
            signal_position = 0;
            quaternary_position = -1;
            play_position = 0;
            replay_position = 0;
 1a8:	e1 2c       	mov	r14, r1

        if(input_get_key_press(RESET_PIN)) {
            state = STATE_PLAY;
            signal_position = 0;
            quaternary_position = -1;
            play_position = 0;
 1aa:	f1 2c       	mov	r15, r1
        wdt_reset();

        if(input_get_key_press(RESET_PIN)) {
            state = STATE_PLAY;
            signal_position = 0;
            quaternary_position = -1;
 1ac:	0f ef       	ldi	r16, 0xFF	; 255
    while (1) {
        wdt_reset();

        if(input_get_key_press(RESET_PIN)) {
            state = STATE_PLAY;
            signal_position = 0;
 1ae:	c1 2c       	mov	r12, r1

    while (1) {
        wdt_reset();

        if(input_get_key_press(RESET_PIN)) {
            state = STATE_PLAY;
 1b0:	10 e0       	ldi	r17, 0x00	; 0
            play_position = 0;
            replay_position = 0;
            LED_set(-1);
        }

        switch (state) {
 1b2:	11 30       	cpi	r17, 0x01	; 1
 1b4:	09 f4       	brne	.+2      	; 0x1b8 <main+0xae>
 1b6:	a2 c0       	rjmp	.+324    	; 0x2fc <main+0x1f2>
 1b8:	20 f0       	brcs	.+8      	; 0x1c2 <main+0xb8>
 1ba:	12 30       	cpi	r17, 0x02	; 2
 1bc:	09 f4       	brne	.+2      	; 0x1c0 <main+0xb6>
 1be:	4a c0       	rjmp	.+148    	; 0x254 <main+0x14a>
 1c0:	a7 c0       	rjmp	.+334    	; 0x310 <main+0x206>
        case STATE_PLAY:
            if (input_get_key_press(ACK_PIN)) {
 1c2:	88 e0       	ldi	r24, 0x08	; 8
 1c4:	0e 94 c7 01 	call	0x38e	; 0x38e <input_get_key_press>
 1c8:	88 23       	and	r24, r24
 1ca:	09 f4       	brne	.+2      	; 0x1ce <main+0xc4>
 1cc:	a1 c0       	rjmp	.+322    	; 0x310 <main+0x206>
                // Ask user to replay information
                if (play_position > replay_position) {
 1ce:	ef 14       	cp	r14, r15
 1d0:	58 f4       	brcc	.+22     	; 0x1e8 <main+0xde>
                    input_get_key_press(0xFF);
 1d2:	8f ef       	ldi	r24, 0xFF	; 255
 1d4:	0e 94 c7 01 	call	0x38e	; 0x38e <input_get_key_press>
                    state = STATE_CHECK;
                    signal_position = 0;
                    quaternary_position = -1;
                    replay_position = 0;
                    LED_set(-1);
 1d8:	8f ef       	ldi	r24, 0xFF	; 255
 1da:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <LED_set>
                if (play_position > replay_position) {
                    input_get_key_press(0xFF);
                    state = STATE_CHECK;
                    signal_position = 0;
                    quaternary_position = -1;
                    replay_position = 0;
 1de:	e1 2c       	mov	r14, r1
                // Ask user to replay information
                if (play_position > replay_position) {
                    input_get_key_press(0xFF);
                    state = STATE_CHECK;
                    signal_position = 0;
                    quaternary_position = -1;
 1e0:	0f ef       	ldi	r16, 0xFF	; 255
            if (input_get_key_press(ACK_PIN)) {
                // Ask user to replay information
                if (play_position > replay_position) {
                    input_get_key_press(0xFF);
                    state = STATE_CHECK;
                    signal_position = 0;
 1e2:	c1 2c       	mov	r12, r1
        case STATE_PLAY:
            if (input_get_key_press(ACK_PIN)) {
                // Ask user to replay information
                if (play_position > replay_position) {
                    input_get_key_press(0xFF);
                    state = STATE_CHECK;
 1e4:	12 e0       	ldi	r17, 0x02	; 2
                    signal_position = 0;
                    quaternary_position = -1;
                    replay_position = 0;
                    LED_set(-1);
                    break;
 1e6:	94 c0       	rjmp	.+296    	; 0x310 <main+0x206>
                }

                // End of signal reached, we are finished
                if (quaternary_position > 3 && (replay_position/4 > BUFFER_SIZE - 1 || signal_buffer[replay_position/4] == 0)) {
 1e8:	04 30       	cpi	r16, 0x04	; 4
 1ea:	98 f0       	brcs	.+38     	; 0x212 <main+0x108>
 1ec:	8e 2d       	mov	r24, r14
 1ee:	86 95       	lsr	r24
 1f0:	86 95       	lsr	r24
 1f2:	e1 e0       	ldi	r30, 0x01	; 1
 1f4:	f0 e0       	ldi	r31, 0x00	; 0
 1f6:	ec 0f       	add	r30, r28
 1f8:	fd 1f       	adc	r31, r29
 1fa:	e8 0f       	add	r30, r24
 1fc:	f1 1d       	adc	r31, r1
 1fe:	80 81       	ld	r24, Z
 200:	81 11       	cpse	r24, r1
 202:	07 c0       	rjmp	.+14     	; 0x212 <main+0x108>
                    state = STATE_PLAY_DONE;
                    toggle_led(&toggle);
 204:	ce 01       	movw	r24, r28
 206:	87 59       	subi	r24, 0x97	; 151
 208:	9f 4f       	sbci	r25, 0xFF	; 255
 20a:	0e 94 72 00 	call	0xe4	; 0xe4 <toggle_led>
                    break;
                }

                // End of signal reached, we are finished
                if (quaternary_position > 3 && (replay_position/4 > BUFFER_SIZE - 1 || signal_buffer[replay_position/4] == 0)) {
                    state = STATE_PLAY_DONE;
 20e:	11 e0       	ldi	r17, 0x01	; 1
                    toggle_led(&toggle);
                    break;
 210:	7f c0       	rjmp	.+254    	; 0x310 <main+0x206>
                }

                // Generate quaternary when needed
                if (quaternary_position > 3) {
 212:	04 30       	cpi	r16, 0x04	; 4
 214:	80 f0       	brcs	.+32     	; 0x236 <main+0x12c>
                    base_4(signal_buffer[signal_position++], quaternary);
 216:	01 e0       	ldi	r16, 0x01	; 1
 218:	0c 0d       	add	r16, r12
 21a:	e1 e0       	ldi	r30, 0x01	; 1
 21c:	f0 e0       	ldi	r31, 0x00	; 0
 21e:	ec 0f       	add	r30, r28
 220:	fd 1f       	adc	r31, r29
 222:	ec 0d       	add	r30, r12
 224:	f1 1d       	adc	r31, r1
 226:	be 01       	movw	r22, r28
 228:	6b 59       	subi	r22, 0x9B	; 155
 22a:	7f 4f       	sbci	r23, 0xFF	; 255
 22c:	80 81       	ld	r24, Z
 22e:	0e 94 64 00 	call	0xc8	; 0xc8 <base_4>
 232:	c0 2e       	mov	r12, r16
                    quaternary_position = 0;
 234:	00 e0       	ldi	r16, 0x00	; 0
                }

                LED_set(quaternary[quaternary_position++]);
 236:	dd 24       	eor	r13, r13
 238:	d3 94       	inc	r13
 23a:	d0 0e       	add	r13, r16
 23c:	e5 e6       	ldi	r30, 0x65	; 101
 23e:	f0 e0       	ldi	r31, 0x00	; 0
 240:	ec 0f       	add	r30, r28
 242:	fd 1f       	adc	r31, r29
 244:	e0 0f       	add	r30, r16
 246:	f1 1d       	adc	r31, r1
 248:	80 81       	ld	r24, Z
 24a:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <LED_set>
                play_position++;
 24e:	f3 94       	inc	r15
                if (quaternary_position > 3) {
                    base_4(signal_buffer[signal_position++], quaternary);
                    quaternary_position = 0;
                }

                LED_set(quaternary[quaternary_position++]);
 250:	0d 2d       	mov	r16, r13
 252:	5e c0       	rjmp	.+188    	; 0x310 <main+0x206>
                play_position++;
            }
            break;
        case STATE_CHECK:
            ;
            uint8_t input = input_get_key_press(ACK_PIN | INPUT0_PIN | INPUT1_PIN | INPUT2_PIN | INPUT3_PIN);
 254:	88 ef       	ldi	r24, 0xF8	; 248
 256:	0e 94 c7 01 	call	0x38e	; 0x38e <input_get_key_press>

            uint8_t x;
            switch(input) {
 25a:	80 32       	cpi	r24, 0x20	; 32
 25c:	b9 f0       	breq	.+46     	; 0x28c <main+0x182>
 25e:	18 f4       	brcc	.+6      	; 0x266 <main+0x15c>
 260:	80 31       	cpi	r24, 0x10	; 16
 262:	31 f0       	breq	.+12     	; 0x270 <main+0x166>
 264:	10 c0       	rjmp	.+32     	; 0x286 <main+0x17c>
 266:	80 34       	cpi	r24, 0x40	; 64
 268:	29 f0       	breq	.+10     	; 0x274 <main+0x16a>
 26a:	80 38       	cpi	r24, 0x80	; 128
 26c:	39 f0       	breq	.+14     	; 0x27c <main+0x172>
 26e:	0b c0       	rjmp	.+22     	; 0x286 <main+0x17c>
            case INPUT0_PIN:
                x = 0;
 270:	d1 2c       	mov	r13, r1
 272:	0e c0       	rjmp	.+28     	; 0x290 <main+0x186>
                break;
            case INPUT1_PIN:
                x = 1;
                break;
            case INPUT2_PIN:
                x = 2;
 274:	68 94       	set
 276:	dd 24       	eor	r13, r13
 278:	d1 f8       	bld	r13, 1
                break;
 27a:	0a c0       	rjmp	.+20     	; 0x290 <main+0x186>
            case INPUT3_PIN:
                x = 3;
 27c:	0f 2e       	mov	r0, r31
 27e:	f3 e0       	ldi	r31, 0x03	; 3
 280:	df 2e       	mov	r13, r31
 282:	f0 2d       	mov	r31, r0
                break;
 284:	05 c0       	rjmp	.+10     	; 0x290 <main+0x186>
            default:
                x = -1;
 286:	dd 24       	eor	r13, r13
 288:	da 94       	dec	r13
 28a:	02 c0       	rjmp	.+4      	; 0x290 <main+0x186>
            switch(input) {
            case INPUT0_PIN:
                x = 0;
                break;
            case INPUT1_PIN:
                x = 1;
 28c:	dd 24       	eor	r13, r13
 28e:	d3 94       	inc	r13
            default:
                x = -1;
            }

            // Invalid key press
            if (x > 3) {
 290:	b3 e0       	ldi	r27, 0x03	; 3
 292:	bd 15       	cp	r27, r13
 294:	e8 f1       	brcs	.+122    	; 0x310 <main+0x206>
                break;
            }

            // Generate quaternary when needed
            if (quaternary_position > 3) {
 296:	04 30       	cpi	r16, 0x04	; 4
 298:	80 f0       	brcs	.+32     	; 0x2ba <main+0x1b0>
                base_4(signal_buffer[signal_position++], quaternary);
 29a:	01 e0       	ldi	r16, 0x01	; 1
 29c:	0c 0d       	add	r16, r12
 29e:	e1 e0       	ldi	r30, 0x01	; 1
 2a0:	f0 e0       	ldi	r31, 0x00	; 0
 2a2:	ec 0f       	add	r30, r28
 2a4:	fd 1f       	adc	r31, r29
 2a6:	ec 0d       	add	r30, r12
 2a8:	f1 1d       	adc	r31, r1
 2aa:	be 01       	movw	r22, r28
 2ac:	6b 59       	subi	r22, 0x9B	; 155
 2ae:	7f 4f       	sbci	r23, 0xFF	; 255
 2b0:	80 81       	ld	r24, Z
 2b2:	0e 94 64 00 	call	0xc8	; 0xc8 <base_4>
 2b6:	c0 2e       	mov	r12, r16
                quaternary_position = 0;
 2b8:	00 e0       	ldi	r16, 0x00	; 0
            }

            // Compare user input
            if (x == quaternary[quaternary_position]) {
 2ba:	e5 e6       	ldi	r30, 0x65	; 101
 2bc:	f0 e0       	ldi	r31, 0x00	; 0
 2be:	ec 0f       	add	r30, r28
 2c0:	fd 1f       	adc	r31, r29
 2c2:	e0 0f       	add	r30, r16
 2c4:	f1 1d       	adc	r31, r1
 2c6:	80 81       	ld	r24, Z
 2c8:	d8 12       	cpse	r13, r24
 2ca:	07 c0       	rjmp	.+14     	; 0x2da <main+0x1d0>
                LED_set(quaternary[quaternary_position++]);
 2cc:	0f 5f       	subi	r16, 0xFF	; 255
 2ce:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <LED_set>
                replay_position++;
 2d2:	e3 94       	inc	r14
                LED_set(4);
                break;
            }

            // Everything entered correctly, continue with sequence
            if (replay_position == play_position) {
 2d4:	fe 10       	cpse	r15, r14
 2d6:	1c c0       	rjmp	.+56     	; 0x310 <main+0x206>
 2d8:	09 c0       	rjmp	.+18     	; 0x2ec <main+0x1e2>
                state = STATE_PLAY;
                signal_position = 0;
                quaternary_position = -1;
                play_position = 0;
                replay_position = 0;
                LED_set(4);
 2da:	84 e0       	ldi	r24, 0x04	; 4
 2dc:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <LED_set>
                // Wrong input, display error and reset
                state = STATE_PLAY;
                signal_position = 0;
                quaternary_position = -1;
                play_position = 0;
                replay_position = 0;
 2e0:	e1 2c       	mov	r14, r1
            } else {
                // Wrong input, display error and reset
                state = STATE_PLAY;
                signal_position = 0;
                quaternary_position = -1;
                play_position = 0;
 2e2:	f1 2c       	mov	r15, r1
                replay_position++;
            } else {
                // Wrong input, display error and reset
                state = STATE_PLAY;
                signal_position = 0;
                quaternary_position = -1;
 2e4:	0f ef       	ldi	r16, 0xFF	; 255
                LED_set(quaternary[quaternary_position++]);
                replay_position++;
            } else {
                // Wrong input, display error and reset
                state = STATE_PLAY;
                signal_position = 0;
 2e6:	c1 2c       	mov	r12, r1
            if (x == quaternary[quaternary_position]) {
                LED_set(quaternary[quaternary_position++]);
                replay_position++;
            } else {
                // Wrong input, display error and reset
                state = STATE_PLAY;
 2e8:	10 e0       	ldi	r17, 0x00	; 0
                signal_position = 0;
                quaternary_position = -1;
                play_position = 0;
                replay_position = 0;
                LED_set(4);
                break;
 2ea:	12 c0       	rjmp	.+36     	; 0x310 <main+0x206>
            if (replay_position == play_position) {
                state = STATE_PLAY;
                signal_position = 0;
                quaternary_position = -1;
                play_position = 0;
                LED_set(-1);
 2ec:	8f ef       	ldi	r24, 0xFF	; 255
 2ee:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <LED_set>
            // Everything entered correctly, continue with sequence
            if (replay_position == play_position) {
                state = STATE_PLAY;
                signal_position = 0;
                quaternary_position = -1;
                play_position = 0;
 2f2:	f1 2c       	mov	r15, r1

            // Everything entered correctly, continue with sequence
            if (replay_position == play_position) {
                state = STATE_PLAY;
                signal_position = 0;
                quaternary_position = -1;
 2f4:	0f ef       	ldi	r16, 0xFF	; 255
            }

            // Everything entered correctly, continue with sequence
            if (replay_position == play_position) {
                state = STATE_PLAY;
                signal_position = 0;
 2f6:	c1 2c       	mov	r12, r1
                break;
            }

            // Everything entered correctly, continue with sequence
            if (replay_position == play_position) {
                state = STATE_PLAY;
 2f8:	10 e0       	ldi	r17, 0x00	; 0
                signal_position = 0;
                quaternary_position = -1;
                play_position = 0;
                LED_set(-1);
                break;
 2fa:	0a c0       	rjmp	.+20     	; 0x310 <main+0x206>
            }
            break;
        case STATE_PLAY_DONE:
            if (input_get_key_press(ACK_PIN)) {
 2fc:	88 e0       	ldi	r24, 0x08	; 8
 2fe:	0e 94 c7 01 	call	0x38e	; 0x38e <input_get_key_press>
 302:	88 23       	and	r24, r24
 304:	29 f0       	breq	.+10     	; 0x310 <main+0x206>
                toggle_led(&toggle);
 306:	ce 01       	movw	r24, r28
 308:	87 59       	subi	r24, 0x97	; 151
 30a:	9f 4f       	sbci	r25, 0xFF	; 255
 30c:	0e 94 72 00 	call	0xe4	; 0xe4 <toggle_led>
            }
            break;
        }

        sleep_cpu();
 310:	88 95       	sleep
    }
 312:	41 cf       	rjmp	.-382    	; 0x196 <main+0x8c>

00000314 <__vector_7>:

uint8_t input_get_key_state(uint8_t key_mask)
{
    key_mask &= key_state;
    return key_mask;
}
 314:	1f 92       	push	r1
 316:	0f 92       	push	r0
 318:	0f b6       	in	r0, 0x3f	; 63
 31a:	0f 92       	push	r0
 31c:	11 24       	eor	r1, r1
 31e:	2f 93       	push	r18
 320:	3f 93       	push	r19
 322:	8f 93       	push	r24
 324:	9f 93       	push	r25
 326:	ef 93       	push	r30
 328:	ff 93       	push	r31
 32a:	e0 e4       	ldi	r30, 0x40	; 64
 32c:	f1 e0       	ldi	r31, 0x01	; 1
 32e:	83 89       	ldd	r24, Z+19	; 0x13
 330:	81 60       	ori	r24, 0x01	; 1
 332:	83 8b       	std	Z+19, r24	; 0x13
 334:	82 b1       	in	r24, 0x02	; 2
 336:	90 91 03 38 	lds	r25, 0x3803	; 0x803803 <key_state>
 33a:	80 95       	com	r24
 33c:	89 27       	eor	r24, r25
 33e:	90 91 01 38 	lds	r25, 0x3801	; 0x803801 <ct0.3175>
 342:	98 23       	and	r25, r24
 344:	39 2f       	mov	r19, r25
 346:	30 95       	com	r19
 348:	30 93 01 38 	sts	0x3801, r19	; 0x803801 <ct0.3175>
 34c:	20 91 00 38 	lds	r18, 0x3800	; 0x803800 <__DATA_REGION_ORIGIN__>
 350:	28 23       	and	r18, r24
 352:	92 2f       	mov	r25, r18
 354:	93 27       	eor	r25, r19
 356:	90 93 00 38 	sts	0x3800, r25	; 0x803800 <__DATA_REGION_ORIGIN__>
 35a:	93 23       	and	r25, r19
 35c:	89 23       	and	r24, r25
 35e:	90 91 03 38 	lds	r25, 0x3803	; 0x803803 <key_state>
 362:	98 27       	eor	r25, r24
 364:	90 93 03 38 	sts	0x3803, r25	; 0x803803 <key_state>
 368:	90 91 03 38 	lds	r25, 0x3803	; 0x803803 <key_state>
 36c:	89 23       	and	r24, r25
 36e:	90 91 02 38 	lds	r25, 0x3802	; 0x803802 <__data_end>
 372:	89 2b       	or	r24, r25
 374:	80 93 02 38 	sts	0x3802, r24	; 0x803802 <__data_end>
 378:	ff 91       	pop	r31
 37a:	ef 91       	pop	r30
 37c:	9f 91       	pop	r25
 37e:	8f 91       	pop	r24
 380:	3f 91       	pop	r19
 382:	2f 91       	pop	r18
 384:	0f 90       	pop	r0
 386:	0f be       	out	0x3f, r0	; 63
 388:	0f 90       	pop	r0
 38a:	1f 90       	pop	r1
 38c:	18 95       	reti

0000038e <input_get_key_press>:
 38e:	f8 94       	cli
 390:	90 91 02 38 	lds	r25, 0x3802	; 0x803802 <__data_end>
 394:	89 23       	and	r24, r25
 396:	90 91 02 38 	lds	r25, 0x3802	; 0x803802 <__data_end>
 39a:	98 27       	eor	r25, r24
 39c:	90 93 02 38 	sts	0x3802, r25	; 0x803802 <__data_end>
 3a0:	78 94       	sei
 3a2:	08 95       	ret

000003a4 <input_init>:


void input_init(void)
{
    // Set ACK, INPUT0, INPUT1, INPUT2, INPUT3 as input
    VPORTA.DIR &= ~(RESET_PIN | ACK_PIN | INPUT0_PIN | INPUT1_PIN | INPUT2_PIN | INPUT3_PIN);
 3a4:	80 b1       	in	r24, 0x00	; 0
 3a6:	83 70       	andi	r24, 0x03	; 3
 3a8:	80 b9       	out	0x00, r24	; 0

    // Enable pull-up resistors
    PORTA.PIN2CTRL = PORT_PULLUPEN_bm;
 3aa:	e0 e0       	ldi	r30, 0x00	; 0
 3ac:	f4 e0       	ldi	r31, 0x04	; 4
 3ae:	88 e0       	ldi	r24, 0x08	; 8
 3b0:	82 8b       	std	Z+18, r24	; 0x12
    PORTA.PIN3CTRL = PORT_PULLUPEN_bm;
 3b2:	83 8b       	std	Z+19, r24	; 0x13
    PORTA.PIN4CTRL = PORT_PULLUPEN_bm;
 3b4:	84 8b       	std	Z+20, r24	; 0x14
    PORTA.PIN5CTRL = PORT_PULLUPEN_bm;
 3b6:	85 8b       	std	Z+21, r24	; 0x15
    PORTA.PIN6CTRL = PORT_PULLUPEN_bm;
 3b8:	86 8b       	std	Z+22, r24	; 0x16
    PORTA.PIN7CTRL = PORT_PULLUPEN_bm;
 3ba:	87 8b       	std	Z+23, r24	; 0x17
 3bc:	08 95       	ret

000003be <LED_init>:
#include "led.h"

void LED_init(void)
{
    // Set LED0, LED1, LED2, LED3 pins as output
    VPORTC.DIR |= LED0_PIN | LED1_PIN | LED2_PIN | LED3_PIN;
 3be:	88 b1       	in	r24, 0x08	; 8
 3c0:	8f 60       	ori	r24, 0x0F	; 15
 3c2:	88 b9       	out	0x08, r24	; 8
 3c4:	08 95       	ret

000003c6 <LED_set>:
}

void LED_set(uint8_t out)
{
    uint8_t x = 0;
    switch (out) {
 3c6:	90 e0       	ldi	r25, 0x00	; 0
 3c8:	87 30       	cpi	r24, 0x07	; 7
 3ca:	91 05       	cpc	r25, r1
 3cc:	88 f4       	brcc	.+34     	; 0x3f0 <LED_set+0x2a>
 3ce:	fc 01       	movw	r30, r24
 3d0:	e2 5c       	subi	r30, 0xC2	; 194
 3d2:	ff 4f       	sbci	r31, 0xFF	; 255
 3d4:	0c 94 20 02 	jmp	0x440	; 0x440 <__tablejump2__>
    case 0:
        x = LED0_PIN;
 3d8:	81 e0       	ldi	r24, 0x01	; 1
 3da:	0d c0       	rjmp	.+26     	; 0x3f6 <LED_set+0x30>
        break;
    case 1:
        x = LED1_PIN;
        break;
    case 2:
        x = LED2_PIN;
 3dc:	84 e0       	ldi	r24, 0x04	; 4
        break;
 3de:	0b c0       	rjmp	.+22     	; 0x3f6 <LED_set+0x30>
    case 3:
        x = LED3_PIN;
 3e0:	88 e0       	ldi	r24, 0x08	; 8
        break;
 3e2:	09 c0       	rjmp	.+18     	; 0x3f6 <LED_set+0x30>
    case 4:
        x = LED0_PIN | LED1_PIN | LED2_PIN | LED3_PIN;
 3e4:	8f e0       	ldi	r24, 0x0F	; 15
        break;
 3e6:	07 c0       	rjmp	.+14     	; 0x3f6 <LED_set+0x30>
    case 5:
        x = LED0_PIN | LED2_PIN;
 3e8:	85 e0       	ldi	r24, 0x05	; 5
        break;
 3ea:	05 c0       	rjmp	.+10     	; 0x3f6 <LED_set+0x30>
    case 6:
        x = LED1_PIN | LED3_PIN;
 3ec:	8a e0       	ldi	r24, 0x0A	; 10
        break;
 3ee:	03 c0       	rjmp	.+6      	; 0x3f6 <LED_set+0x30>
    default:
        x = 0;
 3f0:	80 e0       	ldi	r24, 0x00	; 0
 3f2:	01 c0       	rjmp	.+2      	; 0x3f6 <LED_set+0x30>
    switch (out) {
    case 0:
        x = LED0_PIN;
        break;
    case 1:
        x = LED1_PIN;
 3f4:	82 e0       	ldi	r24, 0x02	; 2
        x = LED1_PIN | LED3_PIN;
        break;
    default:
        x = 0;
    }
    VPORTC.OUT = ~x;
 3f6:	80 95       	com	r24
 3f8:	89 b9       	out	0x09, r24	; 9
 3fa:	08 95       	ret

000003fc <RTC_init>:
    // Reset counter
    while (RTC.STATUS & RTC_CNTBUSY_bm);
    RTC.CNT = 0;

    // Disable sleep mode
    SLPCTRL.CTRLA = 0;
 3fc:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <__RODATA_PM_OFFSET__+0x7f8141>
 400:	81 11       	cpse	r24, r1
 402:	fc cf       	rjmp	.-8      	; 0x3fc <RTC_init>
 404:	e0 e4       	ldi	r30, 0x40	; 64
 406:	f1 e0       	ldi	r31, 0x01	; 1
 408:	81 e0       	ldi	r24, 0x01	; 1
 40a:	87 83       	std	Z+7, r24	; 0x07
 40c:	85 83       	std	Z+5, r24	; 0x05
 40e:	85 8b       	std	Z+21, r24	; 0x15
 410:	80 e8       	ldi	r24, 0x80	; 128
 412:	80 83       	st	Z, r24
 414:	80 91 51 01 	lds	r24, 0x0151	; 0x800151 <__RODATA_PM_OFFSET__+0x7f8151>
 418:	81 11       	cpse	r24, r1
 41a:	fc cf       	rjmp	.-8      	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
 41c:	88 e0       	ldi	r24, 0x08	; 8
 41e:	80 93 50 01 	sts	0x0150, r24	; 0x800150 <__RODATA_PM_OFFSET__+0x7f8150>
 422:	08 95       	ret

00000424 <RTC_PIT_enable>:
 424:	80 91 51 01 	lds	r24, 0x0151	; 0x800151 <__RODATA_PM_OFFSET__+0x7f8151>
 428:	81 11       	cpse	r24, r1
 42a:	fc cf       	rjmp	.-8      	; 0x424 <RTC_PIT_enable>
 42c:	e0 e4       	ldi	r30, 0x40	; 64
 42e:	f1 e0       	ldi	r31, 0x01	; 1
 430:	81 e0       	ldi	r24, 0x01	; 1
 432:	83 8b       	std	Z+19, r24	; 0x13
 434:	82 8b       	std	Z+18, r24	; 0x12
 436:	80 89       	ldd	r24, Z+16	; 0x10
 438:	81 60       	ori	r24, 0x01	; 1
 43a:	80 8b       	std	Z+16, r24	; 0x10
 43c:	08 95       	ret

0000043e <__vector_6>:
}

EMPTY_INTERRUPT(RTC_CNT_vect)
 43e:	18 95       	reti

00000440 <__tablejump2__>:
 440:	ee 0f       	add	r30, r30
 442:	ff 1f       	adc	r31, r31
 444:	05 90       	lpm	r0, Z+
 446:	f4 91       	lpm	r31, Z
 448:	e0 2d       	mov	r30, r0
 44a:	09 94       	ijmp

0000044c <ccp_write_io>:
 44c:	dc 01       	movw	r26, r24
 44e:	28 ed       	ldi	r18, 0xD8	; 216
 450:	20 93 34 00 	sts	0x0034, r18	; 0x800034 <__RODATA_PM_OFFSET__+0x7f8034>
 454:	6c 93       	st	X, r22
 456:	08 95       	ret

00000458 <_exit>:
 458:	f8 94       	cli

0000045a <__stop_program>:
 45a:	ff cf       	rjmp	.-2      	; 0x45a <__stop_program>
